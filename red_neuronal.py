# -*- coding: utf-8 -*-
"""RED NEURONAL

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tSD6AfUbI1P-iNxXU-caKDlwyPDtpYu4
"""

from sklearn.linear_model import Perceptron

# DATOS DE ENTRADA Y SALIDA PARA LA OPERACIÓN "AND"
X = [[0, 0], [0, 1], [1, 0], [1, 1]]
y = [0, 0, 0, 1]

# CREACIÓN DE UN OBJETO PERCEPTRÓN
perceptron = Perceptron()

# ENTRENAMIENTO DEL PERCEPTRÓN
perceptron.fit(X, y)

# REALIZAR PREDICCIONES
predicciones = perceptron.predict(X)

# IMPRIMIR PREDICCIONES
for entrada, prediccion in zip(X, predicciones):
    print(f'Entrada: {entrada} - Predicción: {prediccion}')
# FERNANDO MARTINEZ ELORRIGA

import numpy as np
from keras.models import Sequential
from keras.layers import Dense

# Datos de entrada (matriz de características) e etiquetas
x_train = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_train = np.array([[0], [0], [0], [1]])

# Creación del modelo
model = Sequential()
model.add(Dense(2, input_dim=2, activation='relu'))  # Capa oculta con 2 neuronas
model.add(Dense(1, activation='sigmoid'))  # Capa de salida con 1 neurona

# Compilación del modelo
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Entrenamiento del modelo
model.fit(x_train, y_train, epochs=100, batch_size=1, verbose=0)

# Evaluación del modelo en los datos de entrenamiento
scores = model.evaluate(x_train, y_train, verbose=0)
print("Precisión: %.2f%%" % (scores[1] * 100))

# Hacer predicciones con el modelo entrenado
predictions = model.predict(x_train)

# Redondear resultados para que sean 0 o 1
rounded = [round(x[0]) for x in predictions]
print(rounded)
# FERNANDO MARTINEZ ELORRIGA

model = Sequential()
model.add(Dense(1, input_dim=2, activation='sigmoid'))  # Solo 1 neurona (como un perceptrón simple)
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=100, batch_size=1)
# FERNANDO MARTINEZ ELORRIGA